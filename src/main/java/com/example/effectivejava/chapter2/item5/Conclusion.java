package com.example.effectivejava.chapter2.item5;

public class Conclusion {
    /*
    * item 5 : 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라
    * - 사용하는 자원에 따라 동작이 달라지는 클래스는 정적 유틸리티 클래스나 싱글턴 방식이 적저라히 장ㄴㅎ다
    * - 의존 객체 주입이란 인스턴스를 생성할 때 필요한 자원을 넘겨주는 방식이다
    * - 이 방식의 변형으로 생성자에 자원 팩터리를 넘겨줄 수 있다.
    * - 의존 객체 주입을 사용하면 클래스의 유연성, 재사용성, 테스트 용이성을 개선할 수 있다.
    * */

    /*
    * 변형 -> 생성자에 자원 팩터리 넘겨주기
    * -> Supplier 인터페이스가 그 예시
    *
    * 한정적 와일드카드 타입을 사용해 팩터리 타입 매개변수를 제한해야함
    *
    * 팩터리 메서드 패턴 -> OCP의 지존 객체지향의 지존
    *
    * 사실 프레임워크로 다 해결됨 ㅋ
    * */

    /*
    * 스프링 IOC (Inversion of Control 뒤집힌 제어권)
    * 자기 코드에 대한 제어권을 외부에서 제어
    * (인스턴스 생성, 메서드 실행, 의존성 주입 등) -> bean
    *
    * 스프링 IOC의 장점?
    * 오랜 검증
    * 자바 표준 스펙 지원
    * 싱글톤 스코프 관리
    * 객체 생성 관련 라이프사이클 인터페이스 제공
    *
    * 기존 코드는 그대로 유지하며 @Component나 @Configuration하나로
    * ApplicationContext 내부에 위치 (Bean)
    * */
}
